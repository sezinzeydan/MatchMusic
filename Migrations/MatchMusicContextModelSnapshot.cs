// <auto-generated />
using System;
using MatchMusic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MatchMusic.Migrations
{
    [DbContext(typeof(MatchMusicContext))]
    partial class MatchMusicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.6.20312.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MatchMusic.Models.Artist", b =>
                {
                    b.Property<string>("ArtistId")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ArtistPicture")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MatchMusic.Models.ArtistMatch", b =>
                {
                    b.Property<string>("ArtistId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("ArtistId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchedArtists");
                });

            modelBuilder.Entity("MatchMusic.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("date");

                    b.Property<string>("MatchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(125)");

                    b.Property<int>("MatchRate")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MatchMusic.Models.Track", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TrackAlbumPicture")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("TrackId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("MatchMusic.Models.TrackMatch", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("TrackId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchedTracks");
                });

            modelBuilder.Entity("MatchMusic.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserProfilePicture")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MatchMusic.Models.UserArtist", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ArtistId")
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("UsersArtists");
                });

            modelBuilder.Entity("MatchMusic.Models.UserMatch", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchedUsers");
                });

            modelBuilder.Entity("MatchMusic.Models.UserTrack", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TrackId")
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("UsersTracks");
                });

            modelBuilder.Entity("MatchMusic.Models.ArtistMatch", b =>
                {
                    b.HasOne("MatchMusic.Models.Artist", "Artist")
                        .WithMany("MatchedArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMusic.Models.Match", "Match")
                        .WithMany("MatchedArtists")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchMusic.Models.TrackMatch", b =>
                {
                    b.HasOne("MatchMusic.Models.Match", "Match")
                        .WithMany("MatchedTracks")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMusic.Models.Track", "Track")
                        .WithMany("MatchedTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchMusic.Models.UserArtist", b =>
                {
                    b.HasOne("MatchMusic.Models.Artist", "Artist")
                        .WithMany("UsersArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMusic.Models.User", "User")
                        .WithMany("UsersArtists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchMusic.Models.UserMatch", b =>
                {
                    b.HasOne("MatchMusic.Models.Match", "Match")
                        .WithMany("MatchedUsers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMusic.Models.User", "User")
                        .WithMany("MatchedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchMusic.Models.UserTrack", b =>
                {
                    b.HasOne("MatchMusic.Models.Track", "Track")
                        .WithMany("UsersTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMusic.Models.User", "User")
                        .WithMany("UsersTracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
